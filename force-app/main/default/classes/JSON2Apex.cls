//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.
// 
// 
// Code for the query 
// 
    /*Wave.ProjectionNode[] projs = new Wave.ProjectionNode[] {Wave.QueryBuilder.get('ShipToAccount'),Wave.QueryBuilder.get('REVENUE').sum().alias('Revenue')};

        List<List<String>> orders = new List<List<String>>{new List<String>{'Revenue', 'desc'}};
        
        String query = Wave.QueryBuilder.load('0Fb1H000000MMWxSAO', '0Fc1H0000027B0iSAE').filter('ViewSonicEndUser == \"true\"  && SaleDateYear == \"2020\" && REVENUE > 10000').group(new String[]{'ShipToAccount'}).foreach(projs).order(orders).build('q');     
        ConnectApi.LiteralJson result =  ConnectApi.Wave.executeQuery(query);
        String response = result.json;
        system.debug(response);
        JSON2Apex.parse(response);
    */

public class JSON2Apex {

	public class Field {
		public String id {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Field(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Field consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Input {
		public String type_Z {get;set;} // in json: type
		public List<Inputs> groups {get;set;} 

		public Input(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'groups') {
							groups = arrayOfInputs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Input consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String action {get;set;} 
	public String responseId {get;set;} 
	public Results results {get;set;} 
	public String query {get;set;} 
	public Integer responseTime {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'action') {
						action = parser.getText();
					} else if (text == 'responseId') {
						responseId = parser.getText();
					} else if (text == 'results') {
						results = new Results(parser);
					} else if (text == 'query') {
						query = parser.getText();
					} else if (text == 'responseTime') {
						responseTime = parser.getIntegerValue();
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Results {
		public List<Metadata> metadata {get;set;} 
		public List<Records> records {get;set;} 

		public Results(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'metadata') {
							metadata = arrayOfMetadata(parser);
						} else if (text == 'records') {
							records = arrayOfRecords(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Results consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Lineage {
		public String type_Z {get;set;} // in json: type
		public List<Projections> projections {get;set;} 
		public Input input {get;set;} 

		public Lineage(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'projections') {
							projections = arrayOfProjections(parser);
						} else if (text == 'input') {
							input = new Input(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Lineage consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {
		public Lineage lineage {get;set;} 

		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lineage') {
							lineage = new Lineage(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Projections {
		public Field field {get;set;} 
		public List<Inputs> inputs {get;set;} 

		public Projections(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'field') {
							field = new Field(parser);
						} else if (text == 'inputs') {
							inputs = arrayOfInputs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Projections consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Inputs {
		public String id {get;set;} 

		public Inputs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Inputs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Records {
		public Double RevenueCY {get;set;}
        public Double RevenuePY {get;set;} 
		public String ShipToAccount {get;set;} 

		public Records(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'RevenueCY') {
							RevenueCY = parser.getDoubleValue();
						} else if (text == 'ShipToAccount') {
							ShipToAccount = parser.getText();
						}else if (text == 'ResellerName') {
							ShipToAccount = parser.getText();
						}else if (text == 'ResellerSFDC') {
							ShipToAccount = parser.getText();
						}else if (text == 'RevenuePY') {
							RevenuePY = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Records consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Records> arrayOfRecords(System.JSONParser p) {
        List<Records> res = new List<Records>();
        List<String> acName = new List<String> ();
        
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records(p));            
        }
        system.debug('records here ');
        system.debug(res.size());
        system.debug(res[0].ShipToAccount);
        List<POS_Revenue__c> pos = new List<POS_Revenue__c>();        
        
        for(Records r : res){
            acName.add(r.ShipToAccount);
            
        } 
        Map<String, Account> acc = new Map<String,Account>();
        List<Account> accts = [Select id, name,Revenue_CY__c, Revenue_PY__c  from account where name in : acName];
       
        for(Account a : accts){
            acc.put(a.Name, a);
        }
        
        Map<String, POS_Revenue__c> posacc = new Map<String,POS_Revenue__c>(); 
        List<POS_Revenue__c> posl = [Select id, POS_Name__c from POS_Revenue__c where POS_Name__c in : acName];
        for(POS_Revenue__c pl : posl){
            posacc.put(pl.POS_Name__c, pl);
        }
        
        for(Records r : res){
            POS_Revenue__c  rev = new POS_Revenue__c ();
            rev.POS_Name__c  = r.ShipToAccount;
            rev.Name  = r.ShipToAccount;
            
            if(r.RevenueCY > 0){
                  rev.CY_Revenue__c= r.RevenueCY;
            }else if(r.RevenuePY > 0){
                rev.PY_Revenue__c= r.RevenuePY;
            }
           
            if(acc.containsKey( r.ShipToAccount)){
                Account ac = acc.get(r.ShipToAccount);
                rev.Account_Name__c = ac.Id;
                
            }
            if(posacc.containsKey( r.ShipToAccount)){
                POS_Revenue__c pac = posacc.get(r.ShipToAccount);
                rev.Id = pac.Id;
            }
            pos.add(rev);            
        }         
        database.upsert (pos, false);
        return res;        
    }



    private static List<Inputs> arrayOfInputs(System.JSONParser p) {
        List<Inputs> res = new List<Inputs>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Inputs(p));
        }
        return res;
    }







    private static List<Projections> arrayOfProjections(System.JSONParser p) {
        List<Projections> res = new List<Projections>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Projections(p));
        }
        return res;
    }


    private static List<Metadata> arrayOfMetadata(System.JSONParser p) {
        List<Metadata> res = new List<Metadata>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Metadata(p));
        }
        return res;
    }






}